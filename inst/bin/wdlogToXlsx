#!/usr/bin/env Rscript
# | Looks recursively for .wdlog-files and converts them to csv (stdout)
## * Command-line parsing
require('getopt', quietly = TRUE)
opt_spec <- matrix(c(
     'help'      ,'h', 0, "logical"  , "Getting help"
    ,'dir'       ,'d', 1, "character", "Directory to look for wdlog-files"
    ,'output'    ,'o', 1, "character", "Output xlsx-file"
    ,'projconf'  ,'p', 1, "character", "Filepath to project-configuration"
    ,'year'      ,'y', 1, 'numeric'  , "Year of processing"
    ,'hours'     ,'u', 1, "numeric"  , "Optional hours per day to be worked"
   )       , ncol = 5    , byrow = TRUE)

# Process command-line arguments
opt <- getopt(spec = opt_spec)

if ( !is.null(opt$help) || length(commandArgs(trailingOnly = TRUE)) == 0 )
{
    message(
        "Program to look recursively for .wdlog-files and ",
        "convert them to xlsx \n\n")
    cat(getopt(spec = opt_spec, usage = TRUE, command = "wdlogToXlsx"))
    q(status=0)
}

suppressPackageStartupMessages(require('logbuch'))
require('reshape2', quietly = TRUE)
require('methods', quietly = TRUE)
require('yaml',  quietly = TRUE)
require('xlsx',  quietly = TRUE)
cnf <-           # project-configuration (mapping name to number)
    readProjConf(opt$projconf)
fs <-
    list.files(opt$dir, "\\.wdlog$", recursive = TRUE, full.names = TRUE)
if (length(fs) == 0)
    stop('Could not find any .wdlog-files')
dd <- readWdlogFiles(fs)
odd. <- cbind(Worker = NA ,dd)          # Dummy column for lookupProjects
odd_ <- lookupProjects(odd., cnf)
odd <- sumSubProjHoursWithoutNmb(odd_, cnf)

## Create month data
oddm <- odd[,"Month"]                 # Months
mns <- levels(factor(oddm))
md <-                               # month-data
  setNames(
    lapply(
      mns, function(m)
      {
        dd. <- odd[oddm == m,]
        dd_ <-                   # order and skip worker column
          dd.[order(dd.$ProjNb, dd.$SubProjNb),-1]
        dd.na <- dd_[is.na(dd_$SubProjNb),]
        dd <-      # deal with subproj-NA values
          rbind(
            dd_[!is.na(dd_$SubProjNb),]
           ,dd.na[order(as.numeric(as.character(dd.na$ProjNb))),]
          )
        ## To some statistics
        ir <- 6:ncol(dd)
        dd. <-
          cbind(dd, Total = rowSums(dd[,ir], na.rm = TRUE))
        rbind(
          dd.,
          Total = c(rep(NA, 5),
                    colSums(dd.[,c(ir, ncol(dd.))], na.rm = TRUE)))
      }
    )
   ,mns)

total. <-
    dfSumStat(procWorkerHours(wideToLongData(odd_))[[1]])
whs <-
    yearWorkHours(opt$year, opt$hours, sumHours = FALSE)

total_<-
    merge(total., whs, by.x = 0, by.y = 0)
names(total_)[1] <- 'Monat'
nbs <- sapply(cnf, function(cn) cn@id)
names(total_) <-
    sapply(names(total_), function(nm.)
       {
          nm <- sub("^X", "", nm.)
          if (nm %in% nbs)
              names(nbs)[which(nm == nbs)]
          else
              nm
       }
           )
total <-
    cbind(transform(total_, Monat = months.abbr.de[as.numeric(Monat)])
          , Diff = total_$Total - total_$Sollstunden)

writeXlsx(c(list(Total = total),md), opt$output)

