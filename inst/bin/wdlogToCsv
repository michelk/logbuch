#!/usr/bin/env Rscript
# | Looks recursively for .wdlog-files and converts them to csv (stdout)
## * Command-line parsing
require('getopt', quietly = TRUE)
opt_spec <-
  matrix(c(
    'help'      ,'h', 0, "logical"  , "Getting help"
   ,'dir'       ,'d', 1, "character", "Directory to look for wdlog-files"
   ,'worker'    ,'w', 1, "character", "Optional name of worker; added as column"
   ,'projconf'  ,'p', 1, "character", "Optional filepath to project-configuration"
   ,'encoding'  ,'e', 1, "character", "Output Encoding"
   ,'sumweeks', 's', 0, 'logical', 'Should weeks get summed up'
  )       , ncol = 5    , byrow = TRUE)

# Process command-line arguments
opt <- getopt(spec = opt_spec)
if ( !is.null(opt$help) || length(commandArgs(trailingOnly = TRUE)) == 0 )
{
    message(
        "Program to look recursively for .wdlog-files and ",
        "convert them to csv (stdout)\n\n")
    cat(getopt(spec = opt_spec, usage = TRUE, command = "wdlogToCsv"))
    q(status=0)
}
if (is.null(opt$encoding)) opt$encoding <- ''
if (is.null(opt$sumweeks)) opt$sumweeks <- FALSE
suppressPackageStartupMessages(require('logbuch', quietly = TRUE))
require('magrittr', quietly = TRUE)
require('yaml',  quietly = TRUE)
require('methods',  quietly = TRUE)

cfg <-           # project-configuration (mapping name to number)
{
    if (!is.null(opt$projconf))
        readProjConf(opt$projconf)
    else
        NULL
}

fs <- list.files(opt$dir, "\\.wdlog$", recursive = TRUE, full.names = TRUE)

dd <-
  readWdlogFiles(fs, wide=FALSE) %>%
  subset(!is.na(Time) & Proj != "Feiertag" )

ood <-
  do.call(
    rbind
   ,lapply(seq_len(nrow(dd)), function(i)
   {
     r <- dd[i,]
     p <- as.character(r$Proj)
     a <- as.character(r$SubProj)
     pc <- if (p %in% names(cfg)) cfg[[p]] else NULL

     data.frame(
       Datum = r$Date #format(r$Date, format = "%d.%m.%Y")
      ,Mitarbeiter = opt$worker
      ,Kunde = if (!is.null(pc)) pc@client else NA
      ,Projekt = if (!is.null(pc)) paste(pc@id, pc@name, sep = "_") else p
      ,Aktivit채t = if (!is.null(pc) && a %in% names(pc@sb)) pc@sb[[a]] else a
      ,Stunden = r$Time
      ,Bezeichnung = as.character(r$Desc)
      ,stringsAsFactors=FALSE
     )
   }
   )
  )
outdf <-
  {
    if (!opt$sumweeks)
      ood
    else
    {
      ooo <- transform(ood, KW=  format(Datum, "%Y-%V"), stringsAsFactors=FALSE)
      kkk <-
        cbind(
          aggregate(Stunden ~ KW + Projekt + Aktivit채t
                   ,data = ooo
                   ,sum)
         ,Bezeichnung =
            aggregate(Bezeichnung ~ KW + Projekt + Aktivit채t
                     ,data = ooo
                     ,function(x) paste(unique(x), collapse = ","))[,4]
        )
      kkk[order(kkk$KW, kkk$Projekt, kkk$Aktivit채t),]
    }
  }

write.table(outdf, sep = ";", row.names = FALSE, na = "", fileEncoding=opt$encoding)


