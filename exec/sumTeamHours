#!/usr/bin/env Rscript
# | Summarize work hours of a whole team
# TODO: assoc project-name -- number
## * Command-line parsing

suppressPackageStartupMessages(require('logbuch'))
require('optparse', quietly = TRUE)
option_list <- list(
    make_option(
        c("-p", "--pod"), type = "character", default= ".",
        help="Output directory for project files [default: %default]"),
    make_option(
        c("-w", "--wod"), type = "character", default= ".",
        help="Output directory for worker files [default: %default]")
    )
parser <-
    OptionParser(usage = "%prog [options] ts.csv\n\t%prog [options] < ts.csv",
                 option_list=option_list)

arguments <- parse_args(parser, positional_arguments = TRUE)
opt <- arguments$options

if (length(arguments$args) > 1)
{
    message("Please specify hours.csv-file; either though stdin or file")
    print_help(parser)
    q(status = 1)
} else if (length(arguments$args) == 1)
{
    f <- arguments$args
} else
{
    f <- file('stdin')
}

#f <- "./test.csv"
## * Parameters
NBM <- 31                                # Number of days per month
## * Data Processing

## ** Read data in
dd <-                                   # read all data in
    read.table(f, sep = ";", stringsAsFactors = FALSE)[,1:(NBM+6)]
ddd <- wideToLongData(dd)               # each day in a row
## ** Process Project-Hours
hacc <- procProjectHours(ddd)
## ** Process Worker Hours
whs <- procWorkerHours(ddd)

## * Create output-files

writeCsv <- function(x,f)
{
    write.table(
        x, file = f, quote = FALSE, sep = ";", col.names = NA)
}
## ** Project files
for (pn in names(hacc))
    if (!is.null(hacc[[pn]]))
        writeCsv(dfSumStat(hacc[[pn]]), file.path(opt$pod, sprintf("%s.csv", pn)))

## ** Worker files

for (wn in names(whs))
    if (!is.null(whs[[wn]]))
        writeCsv(dfSumStat(whs[[wn]]), file.path(opt$wod, sprintf("%s.csv", wn)))
